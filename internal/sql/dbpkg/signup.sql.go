// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: signup.sql

package dbpkg

import (
	"context"
	"time"
)

const deleteSignup = `-- name: DeleteSignup :exec
DELETE
FROM signup
WHERE id = $1
`

func (q *Queries) DeleteSignup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSignup, id)
	return err
}

const getSignUpData = `-- name: GetSignUpData :one
SELECT id, email, username, password, verification_code, expire
FROM signup
WHERE id = $1
`

func (q *Queries) GetSignUpData(ctx context.Context, id int32) (Signup, error) {
	row := q.db.QueryRowContext(ctx, getSignUpData, id)
	var i Signup
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.VerificationCode,
		&i.Expire,
	)
	return i, err
}

const getSignupCode = `-- name: GetSignupCode :one
SELECT verification_code
FROM signup
WHERE id = $1
`

func (q *Queries) GetSignupCode(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getSignupCode, id)
	var verification_code string
	err := row.Scan(&verification_code)
	return verification_code, err
}

const insertSignup = `-- name: InsertSignup :one
INSERT INTO signup (email, username, password, verification_code, expire)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertSignupParams struct {
	Email            string
	Username         string
	Password         string
	VerificationCode string
	Expire           time.Time
}

func (q *Queries) InsertSignup(ctx context.Context, arg InsertSignupParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertSignup,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.VerificationCode,
		arg.Expire,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
