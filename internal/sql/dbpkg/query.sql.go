// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dbpkg

import (
	"context"
)

const changeProfilePic = `-- name: ChangeProfilePic :exec
UPDATE profile
SET profile_pic_address = $1
WHERE id = $2
`

type ChangeProfilePicParams struct {
	ProfilePicAddress string
	ID                int64
}

func (q *Queries) ChangeProfilePic(ctx context.Context, arg ChangeProfilePicParams) error {
	_, err := q.db.ExecContext(ctx, changeProfilePic, arg.ProfilePicAddress, arg.ID)
	return err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (user_id)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateProfile(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProfile, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getProfileID = `-- name: GetProfileID :one
SELECT id
FROM profile
WHERE user_id = $1
`

func (q *Queries) GetProfileID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProfileID, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getProfileUserID = `-- name: GetProfileUserID :one
SELECT user_id
FROM profile
WHERE id = $1
`

func (q *Queries) GetProfileUserID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProfileUserID, id)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}
