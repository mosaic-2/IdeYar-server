// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package dbpkg

import (
	"context"
)

const existsUserEmail = `-- name: ExistsUserEmail :one
SELECT count(*)
FROM account
WHERE email = $1
`

func (q *Queries) ExistsUserEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsUserEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const existsUserUsername = `-- name: ExistsUserUsername :one
SELECT count(*)
FROM account
WHERE username = $1
`

func (q *Queries) ExistsUserUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsUserUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, creation_date, password
FROM account
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreationDate,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, creation_date, password
FROM account
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreationDate,
		&i.Password,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, creation_date, password
FROM account
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreationDate,
		&i.Password,
	)
	return i, err
}

const getUserPasswordByEmail = `-- name: GetUserPasswordByEmail :one
SELECT password
FROM account
WHERE email = $1
`

func (q *Queries) GetUserPasswordByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByEmail, email)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserPasswordByUsername = `-- name: GetUserPasswordByUsername :one
select password
FROM account
WHERE username = $1
`

func (q *Queries) GetUserPasswordByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByUsername, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO account (email, username, password)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertUserParams struct {
	Email    string
	Username string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Email, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const resetPassword = `-- name: ResetPassword :exec
UPDATE account
SET password = $2
WHERE id = $1
`

type ResetPasswordParams struct {
	ID       int64
	Password string
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.db.ExecContext(ctx, resetPassword, arg.ID, arg.Password)
	return err
}
