// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package dbpkg

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Gender string

const (
	GenderMale           Gender = "male"
	GenderFemale         Gender = "female"
	GenderOther          Gender = "other"
	GenderPrefernottosay Gender = "prefer not to say"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type Account struct {
	ID           int64
	Email        string
	Username     string
	CreationDate time.Time
	Password     string
}

type Profile struct {
	ID                int64
	UserID            int64
	FirstName         string
	LastName          string
	Gender            Gender
	BirthDay          sql.NullTime
	ProfilePicAddress string
	Bio               string
}

type Signup struct {
	ID               int32
	Email            string
	Username         string
	Password         string
	VerificationCode string
	Expire           time.Time
}
