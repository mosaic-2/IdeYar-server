// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/post.proto

package postServicePb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostService_GetPost_FullMethodName        = "/IdeYarAPI.PostService/GetPost"
	PostService_SearchPost_FullMethodName     = "/IdeYarAPI.PostService/SearchPost"
	PostService_LandingPosts_FullMethodName   = "/IdeYarAPI.PostService/LandingPosts"
	PostService_FundPost_FullMethodName       = "/IdeYarAPI.PostService/FundPost"
	PostService_UserFunds_FullMethodName      = "/IdeYarAPI.PostService/UserFunds"
	PostService_UserProjects_FullMethodName   = "/IdeYarAPI.PostService/UserProjects"
	PostService_UserIDProjects_FullMethodName = "/IdeYarAPI.PostService/UserIDProjects"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	SearchPost(ctx context.Context, in *SearchPostRequest, opts ...grpc.CallOption) (*SearchPostResponse, error)
	LandingPosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LandingPostsResponse, error)
	FundPost(ctx context.Context, in *FundPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserFunds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserFundsResponse, error)
	UserProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserProjectsResponse, error)
	UserIDProjects(ctx context.Context, in *UserIDProjectsRequest, opts ...grpc.CallOption) (*UserProjectsResponse, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, PostService_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) SearchPost(ctx context.Context, in *SearchPostRequest, opts ...grpc.CallOption) (*SearchPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPostResponse)
	err := c.cc.Invoke(ctx, PostService_SearchPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) LandingPosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LandingPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LandingPostsResponse)
	err := c.cc.Invoke(ctx, PostService_LandingPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) FundPost(ctx context.Context, in *FundPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PostService_FundPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UserFunds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserFundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFundsResponse)
	err := c.cc.Invoke(ctx, PostService_UserFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UserProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProjectsResponse)
	err := c.cc.Invoke(ctx, PostService_UserProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UserIDProjects(ctx context.Context, in *UserIDProjectsRequest, opts ...grpc.CallOption) (*UserProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProjectsResponse)
	err := c.cc.Invoke(ctx, PostService_UserIDProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility.
type PostServiceServer interface {
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	SearchPost(context.Context, *SearchPostRequest) (*SearchPostResponse, error)
	LandingPosts(context.Context, *emptypb.Empty) (*LandingPostsResponse, error)
	FundPost(context.Context, *FundPostRequest) (*emptypb.Empty, error)
	UserFunds(context.Context, *emptypb.Empty) (*UserFundsResponse, error)
	UserProjects(context.Context, *emptypb.Empty) (*UserProjectsResponse, error)
	UserIDProjects(context.Context, *UserIDProjectsRequest) (*UserProjectsResponse, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServiceServer struct{}

func (UnimplementedPostServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostServiceServer) SearchPost(context.Context, *SearchPostRequest) (*SearchPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPost not implemented")
}
func (UnimplementedPostServiceServer) LandingPosts(context.Context, *emptypb.Empty) (*LandingPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandingPosts not implemented")
}
func (UnimplementedPostServiceServer) FundPost(context.Context, *FundPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundPost not implemented")
}
func (UnimplementedPostServiceServer) UserFunds(context.Context, *emptypb.Empty) (*UserFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFunds not implemented")
}
func (UnimplementedPostServiceServer) UserProjects(context.Context, *emptypb.Empty) (*UserProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProjects not implemented")
}
func (UnimplementedPostServiceServer) UserIDProjects(context.Context, *UserIDProjectsRequest) (*UserProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIDProjects not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}
func (UnimplementedPostServiceServer) testEmbeddedByValue()                     {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_SearchPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).SearchPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_SearchPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).SearchPost(ctx, req.(*SearchPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_LandingPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).LandingPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_LandingPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).LandingPosts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_FundPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).FundPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_FundPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).FundPost(ctx, req.(*FundPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UserFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UserFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UserFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UserFunds(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UserProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UserProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UserProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UserProjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UserIDProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UserIDProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UserIDProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UserIDProjects(ctx, req.(*UserIDProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IdeYarAPI.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
		{
			MethodName: "SearchPost",
			Handler:    _PostService_SearchPost_Handler,
		},
		{
			MethodName: "LandingPosts",
			Handler:    _PostService_LandingPosts_Handler,
		},
		{
			MethodName: "FundPost",
			Handler:    _PostService_FundPost_Handler,
		},
		{
			MethodName: "UserFunds",
			Handler:    _PostService_UserFunds_Handler,
		},
		{
			MethodName: "UserProjects",
			Handler:    _PostService_UserProjects_Handler,
		},
		{
			MethodName: "UserIDProjects",
			Handler:    _PostService_UserIDProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/post.proto",
}
